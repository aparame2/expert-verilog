//seqDiv.vp
//;
//; use strict;
//; use warnings FATAL=>qw(all);
//; use diagnostics;
//;
//; print STDOUT "This is a print at rtl generation time \n";
//;
//; my $bW = parameter( name=>"bitWidth", val=>16, doc=>"Width of input");

module `mname` (
  input logic [`$bW-1`:0] num,
  input logic [`$bW-1`:0] den,
  input logic clk,
  input logic rst,
  input logic nd_valid,
  output logic nd_ready,
  output logic qr_valid,
  output logic [`$bW-1`:0] quo,
  output logic [`$bW-1`:0] rem
  );

  logic [`$bW/4`:0]i;
  logic [`2*$bW-1`:0] n_copy;
  logic [`2*$bW-1`:0] d_copy;
  logic [`2*$bW-1`:0] diff;
  //logic [`2*$bW-1`:0] d_neg;
  //logic [`$bW-1`:0] comp;
  
  always @(posedge clk,negedge rst)
    begin
      if(!rst)
        begin
		quo=16'b0;
		rem=16'b0;
                n_copy = `2*$bW`'b0;
                d_copy = `2*$bW`'b0;
		nd_ready=1'b1;
		qr_valid=1'b0;
		i=`($bW/4)+1`'d0;
          end

      else if ( nd_ready == 1 && nd_valid == 1 && den != `$bW`'b0 )
          begin
             n_copy = {`$bW`'b0,num};
             d_copy = {1'b0,den,`$bW-1`'b0};
             qr_valid = 0;	
             nd_ready=0;
             i = `($bW/4)+1`'d0;
          end
	
      else if ( nd_ready == 0 && i>=`($bW/4)+1`'d0 && i<`($bW/4)+1`'d16 )
        begin
                   // d_neg = (~d_copy) + comp;
                    diff = n_copy - d_copy;
                    quo = quo << 1;
                    if (!diff[31])
                      begin
                        n_copy = diff;
                        quo[0] = 1'd1;
                      end
                    d_copy = d_copy >> 1;
                    i = i+1;
         end
            else if (nd_ready == 0 && i==5'd16)
               begin
           	 rem = n_copy[`$bW-1`:0];
                 nd_ready = 1'b1;
                 qr_valid = 1'b1;
                 i=i+1;
               end
 end

endmodule: `mname`
