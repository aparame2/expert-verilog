//env.vp
//; my $wl = parameter( name=>"wordLength", val=>32, doc=>"Width of input" );
//; my $iW = parameter( name=>"issueWidth", val=>1, doc=>"Number of fetched instructions" );
//; my $rP = parameter( name=>"rfReadPorts", val=>2, doc=>"Number of RF read ports" );
//; my $wP = parameter( name=>"rfWritePorts", val=>1, doc=>"Number of RF write ports" );
//; my $rC = parameter( name=>"rfEntryCount", val=>2, val=>32, max=>128, doc=>"Number of RF addresses");
//; my $mD = parameter( name=>"MipsMode", val=>"Cyc1",list=>["Cyc1","Cyc5","Smpl5","Fwd5","Dual"],doc=>"Iterative design state, testbench will ignore" );
//; my $rA = parameter( name=>"rfAddressWidth", val=>5, max=>7 , doc=>"Bits for RF address" );

module `mname` (
	


	output logic [`$iW*$wl-1`:0] iCacheReadData,
	input logic [`$wl-1`:0] iCacheReadAddr,
	
	 //DCache Ifc
	 output logic [`$wl-1`:0] dCacheReadData,
	input logic [`$wl-1`:0] dCacheWriteData,
	input logic [`$wl-1`:0] dCacheAddr,
	input logic   dCacheWriteEn,
	input logic    dCacheReadEn,

	 //Register File Ifc
	 //; for( my $i = 0 ; $i < $rP ; $i++ ){
 	 output logic [`$wl-1`:0] rfReadData_p`$i`,
 	input logic [`$rA-1`:0] rfReadAddr_p`$i`,
 	input logic             rfReadEn_p`$i`,
	 //; }
	 //; for( my $i = 0 ; $i < $wP ; $i++ ){
 	input logic [`$wl-1`:0] rfWriteData_p`$i`,
 	input logic [`$rA-1`:0] rfWriteAddr_p`$i`,
 	input logic             rfWriteEn_p`$i`,
	 //; }
	input logic clk, 
	output logic rst);
//; my $icache = generate_base("icache", "my_icache");
//; my $dcache = generate_base("dcache", "my_dcache");
//; my $regfile = generate_base("regfile", "my_regfile");
	 `$icache->instantiate()` (.iCacheReadData(iCacheReadData), .iCacheReadAddr(iCacheReadAddr));
	
	 `$dcache->instantiate()` (.clk(clk),
				  .rst(rst),
				  .dCacheReadData(dCacheReadData),
				  .dCacheWriteData(dCacheWriteData),
				  .dCacheAddr(dCacheAddr),
				  .dCacheWriteEn(dCacheWriteEn),
				  .dCacheReadEn(dCacheReadEn));

	 `$regfile->instantiate()` (.clk(clk),
				   .rst(rst),
				   .rfReadData_p0(rfReadData_p0),
				   .rfReadData_p1(rfReadData_p1),
				   .rfReadAddr_p0(rfReadAddr_p0),
				   .rfReadAddr_p1(rfReadAddr_p1),
				   .rfReadEn_p0(rfReadEn_p0),
				   .rfReadEn_p1(rfReadEn_p1),
				   .rfWriteData_p0(rfWriteData_p0),
				   .rfWriteAddr_p0(rfWriteAddr_p0),
				   .rfWriteEn_p0(rfWriteEn_p0));

	 
	int ic_var=0;	 int error=0;
	real actual_ic, nop_count;
	 logic signed [31:0] pc_virtual=0;
		
	 logic [31:0] registerfile_model [0:31];
	 logic [31:0] icache_model [0:999];
	 logic [7:0][3:0] dcache_model [0:99999];
	 logic signed [31:0] hi,lo;
	 int endprog;
	 real  ipc;	 

	 	 
	 // Configure the icache and dcache
	 task config_mem;
	 begin
		my_icache.icache = new[1000];
	//	my_dcache.dcache = new[100000];
	 end
	 endtask

	 // Initialize memories
	 task init_mem;
	 fork
		init_icache();
		init_dcache();
		init_regfile();
	 join
         endtask

	 // Initialize I$
	 task init_icache;
	 begin
		int i;

		for(i=0;i<1000;i=i+1)
		begin
		    my_icache.icache[i] = 32'b0;
		    icache_model[i] = 32'b0;
		end

	 end
	 endtask

	 // Initialize D$
	 task init_dcache;
	 begin
		int i;

		for(i=0;i<100000;i++) begin
		    my_dcache.dcache[i] = 32'b0;
		    dcache_model[i] = 32'b0;
		end
	 end
	 endtask

 	

	 // Initialize Register File
	 task init_regfile;
	 begin
		int i;

		for(i=0;i<32;i++)
		begin
		    my_regfile.register_file[i] = 32'b0;
		    registerfile_model[i] = 32'b0;
		end
	 end
	 endtask

	 // Reset task
	 task reset;
	 begin
		rst= 1;
		#40
		rst = 0;
		actual_ic = 0;
		nop_count = 0;
		#100 rst = 1;
	 end
	 endtask	

	 task get_results;
	 begin
		while(pc_virtual < ic_var)
		begin
		      $display("pc is %h", pc_virtual);
		      decode_n_compute(icache_model[pc_virtual]);
		      $display("\n instruction is %h", icache_model[pc_virtual]); 
		end
	 end
	 endtask

	 task compare_factorial;
	 begin
		repeat (1) @(posedge clk) begin
       		if(registerfile_model[2] == my_regfile.register_file[2])
		begin
          		$display("Register file is correct for location 2!");
          	        $display("expected Factorial %d actual Factorial %d",registerfile_model[2],my_regfile.register_file[2]);
		end
		else begin
          		error = error+1;
          		      $display("Error in register file at location 2");
			      $display("expected %d actual %d",registerfile_model[2],my_regfile.register_file[2]);
          	     end
		$display("Number to be calculated factorial for %d",my_regfile.register_file[4]);
		end
	end
	endtask

	task load_sumofdigits;
	begin
		ic_var=7;
		$readmemh("all_instr_kv.hex", my_icache.icache);
		$readmemh("all_instr_kv.hex", icache_model);
		my_dcache.dcache[0] = $urandom;
		dcache_model[0] = my_dcache.dcache[0];
		$display("dcache is %d", dcache_model[0]);
	end
	endtask

	task compare_sumofdigits;
	begin
		repeat (1) @(posedge clk) begin
       		if(registerfile_model[4] == my_regfile.register_file[4])
		begin
          		$display("Register file is correct for location 4!");
          	        $display("expected sumofdigit %d actual sumofdigit %d for number %d",registerfile_model[4],my_regfile.register_file[4], $unsigned(my_dcache.dcache[0]));
		end
		else begin
          		error = error+1;
          		      $display("Error in register file at location 2");
			      $display("expected %d actual %d",registerfile_model[4],my_regfile.register_file[4]);
          		     end
		end
	end
	endtask	

	task load_substring;
	begin
		ic_var = 20;
		$readmemh("load_dcache.hex", my_dcache.dcache);
		$readmemh("load_dcache.hex", dcache_model); 
		$readmemh("string.hex", my_icache.icache);
		$readmemh("string.hex", icache_model);
	end
	endtask
	
	task load_histogram;
	begin
		int i;
		ic_var = 20;
		$readmemh("histogram.hex", my_icache.icache);
		$readmemh("histogram.hex", icache_model);

		for(i=0;i<10;i++)
		begin
			@(posedge clk) my_dcache.dcache[i] = $urandom%9;
			dcache_model[i] = my_dcache.dcache[i];
			$display("Array value is %d", dcache_model[i]);
		end
	end
	endtask

	task load_factorial;
	begin
		ic_var=7;
		$readmemh("factorial_test.hex", my_icache.icache);
		$readmemh("factorial_test.hex", icache_model);
		$display("Dummy task");
	end
	endtask

	task compare_histogram;
	begin
		int i;
		for(i=0;i<100;i++)
			my_dcache.dcache[i] = dcache_model[i];

		for(i=0;i<100;i++)
			$display("dcache_model[%d] is %h", i, dcache_model[i]);
		for(i=30;i<40;i++)
		begin
			@(posedge clk) if(dcache_model[i] == my_dcache.dcache[i])
			begin
				$display("Dcache matched");
				$display("expected %h actual %h", dcache_model[i], my_dcache.dcache[i]);
			end
			else begin
				$display("Error in finding array histogram");
				error = error + 1;
				$display("expected %h actual %h", dcache_model[i], my_dcache.dcache[i]);
			end
		end
		if(error==0) $display("Test passed!!");
		else $display("Test failed");
	end
	endtask			
		
	task compare_substring;
	begin
		int i;
		for(i=0;i<120;i++)
			$display("dcache[%p] is %h",i, dcache_model[i]);

		$display("String entered is: Microprocessor is a good course");
		$display("Substring to search: goof");
		$display("If substring matches, RF 15 should be 1");
		@(posedge clk) if(registerfile_model[14] == 1) $display("There was to no string to match!!Load some string");
		@(posedge clk) if(registerfile_model[15] == my_regfile.register_file[15])
		begin
			$display("Substring matched");
			$display("Characters matched are %d", registerfile_model[12]);
		end
		else begin
			error = error + 1;
			$display("Characters matched are %d", registerfile_model[12]);
			$display("String did not match");
		end
	end
	endtask		


	 // Scoreboard
	 task scoreboard_compare;
	 begin
		int i;

		//Check RF
     		for(i=0;i<18;i=i+1)
    		begin   
			//repeat (1) @(posedge clk) begin
       			if(registerfile_model[i] == my_regfile.register_file[i])
			begin
          		      $display("Register file is correct for location %d!",i);
          		      $display("expected %d actual %d",registerfile_model[i],my_regfile.register_file[i]);
			      
       			end
			else begin
          		      error = error+1;
          		      $display("Error in register file at location %d",i);
			      $display("expected %d actual %d",registerfile_model[i],my_regfile.register_file[i]);
          		     end
				$display("expected %d actual %d",registerfile_model[4],my_regfile.register_file[4]);
			end

    	//	end

	//	for(i=0;i<1000;i=i+1)
    	//	begin
       	//		if(dcache_model[i] != my_dcache.dcache[i])
	//		begin
       //   		      error = error+1;
          		     // $display("Error in data cache at location %d", i);
			    //  $display("expected %h actual",dcache_model[i],my_dcache.dcache[i]);
          //		end
    	//	end	

		
		
		if(error==0)
		     $display("Test passed!");
		else 
		     $display("Test failed!");
		$display("ERROR instruction_cnt %d",error);
	 end
	 endtask

	 task compute_ipc;
	 begin
		ipc = (actual_ic)/(actual_ic + nop_count);
		$display("Instructions run=%d, cycles=%d", actual_ic, (actual_ic+nop_count));
		$display(" IPC is %f",ipc);

	 end
  	 endtask
	
	 task decode_n_compute;
	 input logic signed [31:0] instr;
	 begin
		logic [5:0] opcode;
		logic [4:0] shamt;
		logic [5:0] func;
		logic [25:0] target; 
		logic [4:0] rs;
		logic [4:0] rt;
		logic [4:0] rd;
		logic [15:0] imm;
		logic case_bus;
        	int instr_instruction_cnt=0;
		int i;

        	opcode = instr[31:26];
		shamt = instr[10:6];
		func = instr[5:0];
		target = instr[25:0];
		rs = instr[25:21];
		rt = instr[20:16];
		rd = instr[15:11];
		imm = instr[15:0];

		case(opcode)
	
		6'h0: begin
		    	case(func)
				6'h0 :  sll(instr,rs,rt,shamt,rd);
				6'h2 :  srl(rs,rt,shamt,rd);
				6'h3 :  sra(rs,rt,shamt,rd);
				6'h4 :  sllv(rs,rt,rd,shamt);
				6'h6 :  srlv(rs,rt,rd,shamt);
				6'h7 :  srav(rs,rt,rd,shamt);
				6'h8 :  jr(rs,rt,rd,shamt);
				6'h9 :	jalr(rs,rt,rd,shamt);
				6'hB :  sltiu(rs,imm,rd);
				6'h10:  mfhi(rd);
				6'h11:  mthi(rs);
				6'h12:  mflo(rd);
				6'h13:  mtlo(rs);
				6'h18:  mult(rs,rt);
				6'h19:  multu(rs,rt);
				6'h1A:  div(rs,rt);
				6'h1B:  divu(rs,rt);
				6'h20:	add(rs,rt,rd);
				6'h21:  addu(rs,rt,rd);
				6'h22:	sub(rs,rt,rd);
				6'h23:	subu(rs,rt,rd);
				6'h24:	anded(rs,rt,rd);
				6'h25:	ored(rs,rt,rd);
				6'h26:	xored(rs,rt,rd);
				6'h27:	nored(rs,rt,rd);
				6'h2A:	slt(rs,rt,rd);
				6'h2B:  sltu(rs,rt,rd,shamt);
			endcase
		      end

		6'h1: begin
			case(rt)
				5'h0:	bltz(rs,imm); 
				5'h1:	bgez(rs,imm);
				5'h10:  bltzal(rs,imm);
				5'h11:  bgezal(rs,imm);
			endcase
		      end

		6'h2:	j(target);
		6'h3:   jal(target);
		6'h4:	beq(rs,rt,imm);
		6'h5:	bne(rs,rt,imm);
		6'h6:   blez(rs,imm);
		6'h7:	bgtz(rs,imm);
		6'h8:	addi(rs,imm,rt);
		6'h9:	addiu(rs,imm,rt);
		6'hA:	slti(rs,imm,rt);
		6'hC:	andi(rs,imm,rt);
		6'hD:	ori(rs,imm,rt);
		6'hE:	xori(rs,imm,rt);
		6'hF:   lui(rt,imm);
		6'h20:  lb(rs,imm,rt);
		6'h21:  lh(rs,imm,rt);
		6'h22:  lwl(rs,imm,rt);
		6'h23:	load(rs,imm,rt);
		6'h24:  lbu(rs,imm,rt);
		6'h25:  lhu(rs,imm,rt);
		6'h26:  lwr(rs,imm,rt);
		6'h28:  sb(rs,imm,rt);
		6'h29:  sh(rs,imm,rt);
		6'h2A:  swl(rs,imm,rt);
		6'h2B:	store(rs,rt,imm);
		6'h2E:  swr(rs,imm,rt);
	      	endcase
	 end
	 endtask

	// Instructions
	
	task add;
	input logic [4:0] a;
	input logic [4:0] b;
	input logic [4:0] c;
	begin
		registerfile_model[c] = registerfile_model[a] + registerfile_model[b];
		pc_virtual += 4;
		$display("Operation ADD");
		$display("Expected out is %h",registerfile_model[c]); 
	actual_ic = actual_ic + 1;end
	endtask


	task addi;
	input logic [4:0] a;
	input logic [15:0] imm;
	input logic [4:0] c;
	begin
		registerfile_model[c]= registerfile_model[a] + {32'(signed'(imm))};
		pc_virtual += 4;
		$display("operation ADDI");
		$display("Expected out is %h",registerfile_model[c]);
	actual_ic = actual_ic + 1;end
	endtask

	task addiu;
	input logic [4:0] a;
	input logic [15:0] imm;
	input logic [4:0] c;
	begin
		registerfile_model[c] = registerfile_model[a] + {32'(signed'(imm))};
		pc_virtual += 4;
		$display("operation ADDIU");
		$display("Expected out is %h",registerfile_model[c]);
	actual_ic = actual_ic + 1;end
	endtask
	
	task addu;
	input logic [4:0] a;
	input logic [4:0] b;
	input logic [4:0] c;
	begin
		registerfile_model[c] = registerfile_model[a] + registerfile_model[b];
		pc_virtual += 4;
		$display("operation ADDU");
		$display("Expected out is %h",registerfile_model[c]);
	actual_ic = actual_ic + 1;end
	endtask 

	task anded;
	input logic [4:0] a;
	input logic [4:0] b;
	input logic [4:0] c;
	begin
                registerfile_model[c] =  registerfile_model[a] & registerfile_model[b];
		pc_virtual += 4;
		$display("operation AND");
		$display("Expected out is %h",registerfile_model[c]);
	actual_ic = actual_ic + 1;end
	endtask

	task andi;
	input logic [4:0] a;
	input logic [15:0] imm;
	input logic signed [4:0] c;
	begin
		registerfile_model[c] =  registerfile_model[a] & {16'h0, imm};
		pc_virtual += 4;
		$display("operation ANDI");
		$display("Expected out is %h",registerfile_model[c]);
	actual_ic = actual_ic + 1;end
	endtask

	task beq;
	input logic [4:0] a;
	input logic [4:0] b;
	input logic [15:0] imm;
	begin
	    if(registerfile_model[a] == registerfile_model[b])
		 pc_virtual   = pc_virtual + 4 + {32'(signed'(imm))<<2};
	    else
		   pc_virtual =   pc_virtual + 4;
	    $display("operation BEQ");

	actual_ic = actual_ic + 1;end
	endtask
	
	task bgez;
	input logic [4:0] a;
	input logic [15:0] imm;
	begin
		if(registerfile_model[a] >= 0)
	      pc_virtual =  pc_virtual + 4 + {32'(signed'(imm))<<2};
		else
		      pc_virtual =  pc_virtual + 4;
		$display("operation BGEZ");
	actual_ic = actual_ic + 1;end
	endtask
	
	task bgezal;
	input logic [4:0] a;
	input logic [15:0] imm;
	begin
		if(registerfile_model[a] >= 0)
		      pc_virtual =  pc_virtual + 4 + {32'(signed'(imm)) << 2  };
		else
		      pc_virtual =  pc_virtual + 4;
		$display("operation BGEZAL");
	actual_ic = actual_ic + 1;end
	endtask

	task bgtz;
	input logic [4:0] a;
	input logic [15:0] imm;
	begin
		
		if(registerfile_model[a] > 0)
		      pc_virtual =  pc_virtual + 4 + {32'(signed'(imm))<<2};
		//	 pc_virtual =  pc_virtual - imm;
		else
		      pc_virtual =  pc_virtual + 4;
		$display("operation BGTZ");
	actual_ic = actual_ic + 1;end
	endtask

	task blez;
	input logic [4:0] a;
	input logic [15:0] imm;
	begin
		if(registerfile_model[a] <= 0)
		      pc_virtual =  pc_virtual + 4 + {32'(signed'(imm))<<2};
		else
		      pc_virtual =  pc_virtual + 4;
		$display("operation BLEZ");
	actual_ic = actual_ic + 1;end
	endtask

	task bne;
	input logic [4:0] a;
	input logic [4:0] b;
	input logic [15:0] imm;
	begin
		if(registerfile_model[a] != registerfile_model[b])
		    pc_virtual =  pc_virtual + 4 + {32'(signed'(imm))<<2};
		else
		     pc_virtual =  pc_virtual + 4;
		$display("imm is %h",{32'(signed'(imm))}); 
		$display("operation BNE");
	actual_ic = actual_ic + 1;end
	endtask

	task div;
	input logic [4:0] a;
	input logic [4:0] b;
	begin
        	lo = registerfile_model[a] / registerfile_model[b];
		hi = registerfile_model[a] % registerfile_model[b];
		pc_virtual += 4;
		$display("operation DIV");
	actual_ic = actual_ic + 1;end
	endtask
	
	task divu;
	input logic [4:0] a;
	input logic [4:0] b;
	begin
        	lo = registerfile_model[a] / registerfile_model[b];
		hi = registerfile_model[a] % registerfile_model[b];
		pc_virtual += 4;
		$display("operation DIVU");
	actual_ic = actual_ic + 1;end
	endtask

	task load;
	input logic [4:0] a;
	input logic [15:0] imm;
	input logic [4:0] c;
	begin
		registerfile_model[c] =  dcache_model[registerfile_model[a] + {32'(signed'(imm))}];
		pc_virtual += 4;
		$display("operation LOAD");
		$display("Expected out is %h \n",registerfile_model[c]);
	actual_ic = actual_ic + 1;end
	endtask

	task nored;
	input logic [4:0] a;
	input logic [4:0] b;
	input logic [4:0] c;
	begin
		registerfile_model[c] =  ~(registerfile_model[a] | registerfile_model[b]);
		pc_virtual += 4;
		$display("operation NOR");
		$display("Expected out is %h",registerfile_model[c]);
	actual_ic = actual_ic + 1;end
	endtask

	task ored;
	input logic [4:0] a;
	input logic [4:0] b;
	input logic [4:0] c;
	begin
		registerfile_model[c] =  (registerfile_model[a] | registerfile_model[b]);
		pc_virtual += 4;
		$display("operation OR");
		$display("Expected out is %h",registerfile_model[c]);
	actual_ic = actual_ic + 1;end
	endtask

	task ori;
	input logic [4:0] a;
	input logic [15:0] imm;
	input logic [4:0] c;
	begin
		registerfile_model[c] =  registerfile_model[a] | {16'h0, imm};
		pc_virtual += 4;
		$display("operation ORI");
		$display("Expected out is %h",registerfile_model[c]);
	actual_ic = actual_ic + 1;end
	endtask


	task slt;
	input logic [4:0] a;
	input logic [4:0] b;
	input logic [4:0] c;
	begin
		if((registerfile_model[a] < registerfile_model[b]))
		      registerfile_model[c] =  1'b1;
		else
		      registerfile_model[c] =  1'b0;
		pc_virtual += 4;
		$display("operation SLT");
		$display("Expected out is %h",registerfile_model[c]);
	actual_ic = actual_ic + 1;end
	endtask

	task slti;
	input logic [4:0] a;
	input logic [15:0] imm;
	input logic [4:0] c;
	begin
		if (registerfile_model[a] < {32'(signed'(imm))})
		     registerfile_model[c] =  1'b1;
		else
		     registerfile_model[c] =  1'b0;
		pc_virtual += 4;
		$display("operation SLTI");
		$display("Expected out is %h",registerfile_model[c]);
	actual_ic = actual_ic + 1;end
	endtask

	task sra;
	input logic [4:0] a;
	input logic [4:0] b;
	input logic [4:0] shamt;
	input logic [4:0] c;
	begin
		assert(a== 5'b0);
		registerfile_model[c] =  registerfile_model[b] >>> shamt;
		pc_virtual += 4;
		$display("operation SRA");
		$display("Expected out is %h",registerfile_model[c]);
	actual_ic = actual_ic + 1;end
	endtask
	
	task subi;
	input logic [4:0] a;
	input logic [15:0] imm;
	input logic [4:0] c;
	begin
		registerfile_model[c] = registerfile_model[a] - {32'(signed'(imm))};
		pc_virtual += 4;
		$display("operation SUBI");
		$display("Expected out is %h",registerfile_model[c]);
	actual_ic = actual_ic + 1;end
	endtask 
	
	task subiu;
	input logic [4:0] a;
	input logic [15:0] imm;
	output logic [4:0] c;
	begin
		registerfile_model[c] = registerfile_model[a] - {32'(signed'(imm))};
		pc_virtual += 4;
		$display("operation SUBIU");
		$display("Expected out is %h",registerfile_model[c]);
	actual_ic = actual_ic + 1;end
	endtask

	task sub;
	input logic [4:0] a;
	input logic [4:0] b;
	input logic [4:0] c;
	begin
    		registerfile_model[c] =  registerfile_model[a] - registerfile_model[b];
		pc_virtual += 4;
		$display("operation SUB");
		$display("Expected out is %h",registerfile_model[c]);
	actual_ic = actual_ic + 1;end
	endtask

	task store;
	input logic [4:0] a;
	input logic [4:0] c;
	input logic [15:0] imm;
	begin
		dcache_model[registerfile_model[a] + {32'(signed'(imm))}] = registerfile_model[c];
		pc_virtual += 4;
		$display("operation SW");
		$display("Expected out is %h at addr %h", dcache_model[registerfile_model[a] + {32'(signed'(imm))}], registerfile_model[a] + {32'(signed'(imm))});
	actual_ic = actual_ic + 1;end
	endtask

	task xored;
	input logic [4:0] a;
	input logic [4:0] b;
	input logic [4:0] c;
	begin
		registerfile_model[c] =  registerfile_model[a] ^ registerfile_model[b];
		pc_virtual += 4;
		$display("operation XOR");
		$display("Expected out is %h",registerfile_model[c]);
	actual_ic = actual_ic + 1;end
	endtask

	task xori;
	input logic [4:0] a;
	input logic [15:0] imm;
	input logic signed [4:0] c;
	begin
		registerfile_model[c] =  (registerfile_model[a] ^ {16'h0,imm});
		pc_virtual += 4;
		$display("operation XORI");
		$display("Expected out is %h",registerfile_model[c]);
	actual_ic = actual_ic + 1;end
	endtask

	task j;
	input logic [25:0] a;
	begin
		pc_virtual =  {pc_virtual[31:28], a, 2'b0};
		$display("operation JUMP");	
	actual_ic = actual_ic + 1;end
	endtask

	task jr;
	input logic [4:0] a;
	input logic [4:0] b;
	input logic [4:0] c;
	input logic [4:0] d;
	begin
		assert({b,c,d} == 15'b0);
	  	pc_virtual =  pc_virtual + 4 + registerfile_model[a];
		$display("operation JR");
	actual_ic = actual_ic + 1; end
	endtask

	task bltz;
	input logic [4:0] a;
	input logic [15:0] imm;
	begin
		if(registerfile_model[a] < 0)
		      pc_virtual =  pc_virtual + 4 + {32'(signed'(imm))};
		else
		      pc_virtual =  pc_virtual + 4;
		$display("operation BLTZ");
	actual_ic = actual_ic + 1;end
	endtask	
	
	task sll;
	input logic [31:0] instr;
	input logic [4:0] a;
	input logic [4:0] b;
	input logic [4:0] shift;
	input logic signed [4:0] c;
	begin
		if(instr==32'd0)
		nop_count=nop_count+1;
		else
		actual_ic = actual_ic + 1;

		assert(a == 5'b0);
		registerfile_model[c] = registerfile_model[b] << shift;
		pc_virtual += 4;
		$display("operation SLL");
		$display("Expected out is %h",registerfile_model[c]);
	end
	endtask	
		
	task sllv;
	input logic [4:0] a;
	input logic [4:0] b;
	input logic [4:0] c;
	input logic [4:0] d;
	begin
		logic [31:0] shift;
		logic [4:0] shiftamt;
		assert(d == 5'b0);
	        shift = registerfile_model[a];
		shiftamt = shift[4:0];
		registerfile_model[c] = registerfile_model[b] << shiftamt;
		pc_virtual += 4;
		$display("operation SLLV");
		$display("Expected out is %h",registerfile_model[c]);
	actual_ic = actual_ic + 1;end
	endtask	
	
	task srlv;
	input logic [4:0] a;
	input logic [4:0] b;
	input logic [4:0] c;
	input logic [4:0] d;
	begin
		logic [31:0] shift;
		logic [4:0] shiftamt;
		assert(d == 5'b0);
	        shift = registerfile_model[a];
		shiftamt = shift[4:0];
		registerfile_model[c] = registerfile_model[b] >> shiftamt;
		pc_virtual += 4;
		$display("operation SRLV");
		$display("Expected out is %h",registerfile_model[c]);
	actual_ic = actual_ic + 1;end
	endtask

	
	task srav;
	input logic [4:0] a;
	input logic [4:0] b;
	input logic [4:0] c;
	input logic [4:0] d;
	begin
	    	logic [31:0] shift;
		logic [4:0] shiftamt;
		assert(d == 5'b0);
		shift = registerfile_model[a];
		shiftamt = shift[4:0];
		registerfile_model[c] = registerfile_model[b] >>> shiftamt;
		pc_virtual += 4;
		$display("operation SRAV");
		$display("Expected out is %h",registerfile_model[c]);
	actual_ic = actual_ic + 1;end
	endtask	
	
	task sltiu;
	input logic [4:0] a;
	input logic [15:0] imm;
	input logic [4:0] c;
	begin
		if (registerfile_model[a] < {32'(signed'(imm))})
		     registerfile_model[c] =  1'b1;
		else
		     registerfile_model[c] =  1'b0;
		pc_virtual += 4;
		$display("operation SLTIU");
		$display("Expected out is %h",registerfile_model[c]);
	actual_ic = actual_ic + 1;end
	endtask	
	
	task srl;
	input logic [4:0] a;
	input logic [4:0] b;
	input logic [4:0] shift;
	input logic [4:0] c;
	begin
		assert(a == 5'b0);
		registerfile_model[c] = registerfile_model[b] >> shift;
		pc_virtual += 4;
		$display("operation SRL");
		$display("Expected out is %h",registerfile_model[c]);	
	actual_ic = actual_ic + 1;end
	endtask	
	
   	task subu;
	input logic [4:0] a;
	input logic [4:0] b;
	input logic [4:0] c;
	begin
    		registerfile_model[c] =  registerfile_model[a] - registerfile_model[b];
		pc_virtual += 4;
		$display("operation SUBU");
		$display("Expected out is %h",registerfile_model[c]);	
	actual_ic = actual_ic + 1;end
        endtask	
		
        task sltu;
	input logic [4:0] a;
	input logic [4:0] b;
	input logic [4:0] c;
	input logic [4:0] d;
	begin
		assert(d == 5'b0);
		if((registerfile_model[a] < registerfile_model[b]))
		      registerfile_model[c] =  1'b1;
		else
		      registerfile_model[c] =  1'b0;
		pc_virtual += 4;
		$display("operation SLTU");
		$display("Expected out is %h",registerfile_model[c]);
	actual_ic = actual_ic + 1;end
	endtask
	
	task mfhi;
	input logic [4:0] a;
	begin
        	registerfile_model[a] = hi;
		pc_virtual += 4;
		$display("operation MFHI");
		$display("Expected out is %h",registerfile_model[a]);
	actual_ic = actual_ic + 1;end
	endtask
	
	task mflo;
	input logic [4:0] a;
	begin
        	registerfile_model[a] = lo;
		pc_virtual += 4;
		$display("operation MFLO");
		$display("Expected out is %h",registerfile_model[a]);
	actual_ic = actual_ic + 1;end
	endtask

        task mthi;
	input logic [4:0] a;
	begin
        	hi = registerfile_model[a]; 
		pc_virtual += 4;
		$display("operation MTHI");
		$display("Expected out is %h",registerfile_model[a]);
	actual_ic = actual_ic + 1;end
	endtask
   
        task mtlo;
	input logic [4:0] a;
	begin
        	lo = registerfile_model[a];
		pc_virtual += 4;
		$display("operation MTLO");
		$display("Expected out is %h",registerfile_model[a]);
	actual_ic = actual_ic + 1;end
	endtask

	task mult;
	input logic [4:0] a;
	input logic [4:0] b;
	begin
		{hi,lo} = registerfile_model[a] * registerfile_model[b];
		pc_virtual += 4;
		$display("operation MULT");
	actual_ic = actual_ic + 1;end
	endtask

	task multu;
	input logic [4:0] a;
	input logic [4:0] b;
	begin
        	{hi, lo} = registerfile_model[a] * registerfile_model[b];
		pc_virtual += 4;
		$display("operation MULTU");
	actual_ic = actual_ic + 1;end
	endtask
	
	task bltzal;
	input logic [4:0] a;
	input logic [15:0] imm;
	begin
		if(registerfile_model[a] < 0) begin
		      pc_virtual =  pc_virtual + 4 + {32'(signed'(imm))};
		      registerfile_model[31]=pc_virtual+32'd2;
                end
		else
		      pc_virtual =  pc_virtual + 4;
			$display("operation BLTZAL");
	actual_ic = actual_ic + 1;end
	endtask

	task jalr;
	input logic [4:0] a;
	input logic [4:0] b;
	input logic [4:0] c;
	input logic [4:0] d;
	begin
		assert({b,d} == 10'b0);
		pc_virtual = pc_virtual + 4 + registerfile_model[a];
		registerfile_model[c] = pc_virtual + 32'd8;
		$display("operation JALR");
	actual_ic = actual_ic + 1;end
	endtask

	task jal;
	input logic [25:0] a;
	begin
		pc_virtual =  {pc_virtual[31:28], a, 2'b0};
		registerfile_model[31]=pc_virtual+32'd2;
		$display("operation JUMP");	
	actual_ic = actual_ic + 1;end
	endtask

	task lui;
	input logic [4:0] a;
	input logic [15:0] imm;
	begin
		registerfile_model[a] = {imm, 16'h0};
		pc_virtual =  pc_virtual + 4;
		$display("Expected out is %h",registerfile_model[a]);
		$display("Opration is LUI");
	actual_ic = actual_ic + 1;end
        endtask

	task lb;
	input logic [4:0] a;
	input logic [15:0] imm;
	input logic [4:0] b;
	begin
		logic signed [31:0] c;
		logic signed [31:0] d;
		logic signed [31:0] e;
		pc_virtual =  pc_virtual + 4;
		d = registerfile_model[a] + {32'(signed'(imm))};
		c = dcache_model[d/4];
		case(d[1:0])
			2'd0: registerfile_model[b] = {32'(signed'( c[7:0]))};
			2'd1: registerfile_model[b] = {32'(signed'( c[15:8]))};
			2'd2: registerfile_model[b] = {32'(signed'( c[23:16]))};
			2'd3: registerfile_model[b] = {32'(signed'( c[31:24]))};
		endcase
		$display("Expected out is %h at %h",registerfile_model[b], d);
		$display("Opration is LB");
	actual_ic = actual_ic + 1;end
	endtask

	task lh;
	input logic [4:0] a;
	input logic [15:0] imm;
	input logic [4:0] b;
	begin
		logic signed [31:0] c;
		logic signed [31:0] d;
		pc_virtual =  pc_virtual + 4;
		d = registerfile_model[a] + {32'(signed'(imm))};
		c = dcache_model[registerfile_model[a] + {32'(signed'(imm))}];
		c = c/2;
		case(d[0])
			1'd0: registerfile_model[b] = {32'(signed'( c[15:0]))};
			1'd1: registerfile_model[b] = {32'(signed'( c[31:16]))};
		endcase
		$display("Expected out is %h",registerfile_model[b]);
		$display("Opration is LH");
	actual_ic = actual_ic + 1;end
	endtask

	task lwl;
	input logic [4:0] a;
	input logic [15:0] imm;
	input logic [4:0] b;
	begin
		logic signed [31:0] c;
		logic signed [31:0] d;
		logic signed [31:0] e;
		pc_virtual =  pc_virtual + 4;
		e = registerfile_model[b];
		d = registerfile_model[a] + {32'(signed'(imm))};
		c = dcache_model[registerfile_model[a] + {32'(signed'(imm))}];
		case(d[1:0])
			2'd0: registerfile_model[b] = c;
			2'd1: registerfile_model[b] = {c[31:8], e[7:0]};
			2'd2: registerfile_model[b] = {c[31:16], e[15:0]};
			2'd3: registerfile_model[b] = {c[31:24], e[23:0]};
		endcase
		$display("Expected out is %h",registerfile_model[b]);
		$display("Opration is LWL");
	actual_ic = actual_ic + 1;end
	endtask 

	task lbu;
	input logic [4:0] a;
	input logic [15:0] imm;
	input logic [4:0] b;
	begin
		logic signed [31:0] c;
		logic signed [31:0] d;
		pc_virtual =  pc_virtual + 4;
		d = registerfile_model[a] + {32'(signed'(imm))};
		c = dcache_model[registerfile_model[a] + {32'(signed'(imm))}];
		case(d[1:0])
			2'd0: registerfile_model[b] = {24'b0, c[7:0]};
			2'd1: registerfile_model[b] = {24'b0, c[15:8]};
			2'd2: registerfile_model[b] = {24'b0, c[23:16]};
			2'd3: registerfile_model[b] = {24'b0, c[31:24]};
		endcase
		$display("Expected out is %h",registerfile_model[b]);
		$display("Opration is LBU");
	actual_ic = actual_ic + 1;end
	endtask

	task lhu;
	input logic [4:0] a;
	input logic [15:0] imm;
	input logic [4:0] b;
	begin
		logic signed [31:0] c;
		logic signed [31:0] d;
		pc_virtual =  pc_virtual + 4;
		d = registerfile_model[a] + {32'(signed'(imm))};
		c = dcache_model[registerfile_model[a] + {32'(signed'(imm))}];
		case(d[0])
			1'd0: registerfile_model[b] = {16'h0, c[15:0]};
			1'd1: registerfile_model[b] = {16'h0, c[31:16]};
		endcase
		$display("Expected out is %h",registerfile_model[b]);
		$display("Opration is LHU");
	actual_ic = actual_ic + 1;end
	endtask	
		
	task lwr;
	input logic [4:0] a;
	input logic [15:0] imm;
	input logic [4:0] b;
	begin
		logic signed [31:0] c;
		logic signed [31:0] d;
		logic signed [31:0] e;
		e = registerfile_model[b];
		pc_virtual =  pc_virtual + 4;
		d = registerfile_model[a] + {32'(signed'(imm))};
		c = dcache_model[registerfile_model[a] + {32'(signed'(imm))}];
		case(d[1:0])
			2'd0: registerfile_model[b] = {e[31:8], c[7:0]};
			2'd1: registerfile_model[b] = {e[31:16], c[15:0]};
			2'd2: registerfile_model[b] = {e[31:24], c[23:0]};
			2'd3: registerfile_model[b] = c;
		endcase
		$display("Expected out is %h",registerfile_model[b]);
		$display("Opration is LWR");
	actual_ic = actual_ic + 1;end
	endtask	

	task sb;
	input logic [4:0] a;
	input logic [15:0] imm;
	input logic [4:0] b;
	begin
		logic signed [31:0] c;
		logic signed [31:0] d;
		d = registerfile_model[a] + {32'(signed'(imm))};
		pc_virtual =  pc_virtual + 4;
		c = registerfile_model[b];
		case(d[1:0])
			2'd0: dcache_model[registerfile_model[a] + {32'(signed'(imm))}] = {32'(signed'( c[7:0]))};
			2'd1: dcache_model[registerfile_model[a] + {32'(signed'(imm))}] = {32'(signed'( c[15:8]))};
			2'd2: dcache_model[registerfile_model[a] + {32'(signed'(imm))}] = {32'(signed'( c[23:16]))};
			2'd3: dcache_model[registerfile_model[a] + {32'(signed'(imm))}] = {32'(signed'( c[31:24]))};
		endcase
     	        $display("Expected output is %h at %h", dcache_model[registerfile_model[a] + {32'(signed'(imm))}], registerfile_model[a] + {32'(signed'(imm))});
		$display("Opration is SB");
	actual_ic = actual_ic + 1;end
	endtask
	
	task sh;
	input logic [4:0] a;
	input logic [15:0] imm;
	input logic [4:0] b;
	begin
		logic signed [31:0] c;
		logic signed [31:0] d;
		d = registerfile_model[a] + {32'(signed'(imm))};
		pc_virtual =  pc_virtual + 4;
		c = registerfile_model[b];
		case(d[0])
			2'd0: dcache_model[registerfile_model[a] + {32'(signed'(imm))}] = {32'(signed'( c[15:0]))};
			2'd1: dcache_model[registerfile_model[a] + {32'(signed'(imm))}] = {32'(signed'( c[31:16]))};
		endcase
		$display("Expected output is %h at %h", dcache_model[registerfile_model[a] + {32'(signed'(imm))}], registerfile_model[a] + {32'(signed'(imm))});
		$display("Opration is SH");	
	actual_ic = actual_ic + 1;end
	endtask

	task swl;
	input logic [4:0] a;
	input logic [15:0] imm;
	input logic [4:0] b;
	begin
		logic signed [31:0] c;
		logic signed [31:0] d;
		logic signed [31:0] e;
		pc_virtual =  pc_virtual + 4;
		e = dcache_model[registerfile_model[a] + {32'(signed'(imm))}];
		d = registerfile_model[a] + {32'(signed'(imm))};
		c = registerfile_model[b];
		case(d[1:0])
			2'd0: dcache_model[registerfile_model[a] + {32'(signed'(imm))}] = c;
			2'd1: dcache_model[registerfile_model[a] + {32'(signed'(imm))}] = {c[31:8], e[7:0]};
			2'd2: dcache_model[registerfile_model[a] + {32'(signed'(imm))}] = {c[31:16], e[15:0]};
			2'd3: dcache_model[registerfile_model[a] + {32'(signed'(imm))}] = {c[31:24], e[23:0]};
		endcase	
		$display("Expected output is %h at %h", dcache_model[registerfile_model[a] + {32'(signed'(imm))}], registerfile_model[a] + {32'(signed'(imm))});
		$display("Opration is SWL");
	actual_ic = actual_ic + 1;end
	endtask

	task swr;
	input logic [4:0] a;
	input logic [15:0] imm;
	input logic [4:0] b;
	begin
		logic signed [31:0] c;
		logic signed [31:0] d;
		logic signed [31:0] e;
		pc_virtual =  pc_virtual + 4;
		e = dcache_model[registerfile_model[a] + {32'(signed'(imm))}];
		d = registerfile_model[a] + {32'(signed'(imm))};
		c = registerfile_model[b];
		case(d[1:0])
			2'd0: dcache_model[registerfile_model[a] + {32'(signed'(imm))}] = {e[31:8], c[7:0]};
			2'd1: dcache_model[registerfile_model[a] + {32'(signed'(imm))}] = {e[31:16], c[15:0]};
			2'd2: dcache_model[registerfile_model[a] + {32'(signed'(imm))}] = {e[31:24], c[23:0]};
			2'd3: dcache_model[registerfile_model[a] + {32'(signed'(imm))}] = c;
		endcase
		$display("Expected output is %h at %h", dcache_model[registerfile_model[a] + {32'(signed'(imm))}], registerfile_model[a] + {32'(signed'(imm))});
		$display("Opration is SWR");
	actual_ic = actual_ic + 1;end
	endtask


endmodule
		
	 	 

	
		
		
		
	


	
