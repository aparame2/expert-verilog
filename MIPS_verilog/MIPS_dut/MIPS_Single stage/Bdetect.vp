//branch_detector.vp

//; use strict;
//; use warnings FATAL=>qw(all);
//; use diagnostics;

//; my $wl = parameter( name=>"wordLength", val=>32, doc=>"Width of input" );
//; my $iW = parameter( name=>"issueWidth", val=>1, doc=>"Number of fetched instructions" );
//; my $rP = parameter( name=>"rfReadPorts", val=>2, doc=>"Number of RF read ports" );
//; my $wP = parameter( name=>"rfWritePorts", val=>1, doc=>"Number of RF write ports" );
//; my $rC = parameter( name=>"rfEntryCount", val=>32, max=>128, doc=>"Number of RF addresses");
//; my $rA = parameter( name=>"rfAddressWidth", val=>5, max=>7 , doc=>"Bits for RF address" );

module `mname`
(
  
input logic signed [31:0] src0, src1,
input logic BEQ,BNE,BGTZ,
output logic B_sel
  
);

logic [2:0] branch_sel;
logic signed [31:0] signed_zero;
  
assign signed_zero = 32'd0;

assign branch_sel={BEQ,BNE,BGTZ};

always_comb
begin
  case(branch_sel)
    3'b100 : B_sel = (src0 == src1) ? 1'b1 : 1'b0; 			//BEQ
    3'b010 : B_sel = (src0 != src1) ? 1'b1 : 1'b0;			//BNE
    3'b001 : B_sel = (src0 > signed_zero) ? 1'b1 : 1'b0;		//BGTZ
    default   : B_sel = 1'b0;						//NOT BRANCH
  endcase
end

endmodule
