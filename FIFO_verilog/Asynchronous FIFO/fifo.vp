//fifo.vp

//; use strict;
//; use warnings FATAL=>qw(all);
//; use diagnostics;

//;my $bW = parameter (Name=>"bitWidth", Val=>16, doc=>"Width of input");
//;my $eC = parameter (Name=>"occupancy", Val=>8, doc=>"Number of elements stored");
//;my $sW = parameter (Name=>"selWidth", Val=>3);

module `mname`(push,pop,push_data,pop_data,clk,rst,full,empty);

  	input logic clk;
 	input logic rst;
	input logic push;
	input logic pop;
 	input logic [`$bW-1`:0] push_data;
 	output logic[`$bW-1`:0] pop_data;
	output logic empty; 
	output logic full;

reg [`$bW-1`:0] data [`$eC-1`:0];
reg [`$sW`:0] rptr, wptr;

assign full = (~wptr[`$sW`] == rptr[`$sW`]) && (wptr[`$sW-1`:0] == rptr[`$sW-1`:0]);
assign empty = (wptr[`$sW`:0] == rptr[`$sW`:0]);
assign pop_data = (pop && !empty) ? data[rptr[`$sW-1`:0]] : pop_data;

always @ (posedge clk, negedge rst)
begin
    if(!rst)
     begin
        wptr <=`$sW+1`'b0;
     end
    else if (push && !full)
      begin
        wptr <= wptr + 1;
      end
end

always @ (posedge clk)
  begin
     if (push && !full)
        begin
            data[wptr[`$sW-1`:0]] <= push_data;
        end
  end

  always @ (posedge clk, negedge rst)
  begin
      if(!rst)
       begin
          rptr <=`$sW+1`'b0;
       end
      else if (pop && !empty)
        begin
	 // pop_data <= data[rptr[`$sW-1`:0]];	
          rptr <= rptr + 1;
        end
  end

endmodule
